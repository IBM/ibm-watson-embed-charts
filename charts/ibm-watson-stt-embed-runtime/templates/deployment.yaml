{{- if not (eq .Values.license true) }}
{{- fail "Product licenses must be read and accepted. Then set `license` to true" }}
{{- end }}

{{- /* Construct the list of model images to use in initContainers */}}
{{- $modelsList := (include "ibm-embed-helpers.enabledModelImageConfigs" .) | fromYamlArray }}

{{- /* Always include the model catalog upload */}}
{{- $modelsList = concat (list .Values.images.catalog) $modelsList }}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "ibm-watson-stt-embed-runtime.fullname" . }}
  labels:
    {{- include "ibm-watson-stt-embed-runtime.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      {{- include "ibm-watson-stt-embed-runtime.selectorLabels" . | nindent 6 }}
  progressDeadlineSeconds: 1800
  template:
    metadata:
      labels:
        {{- include "ibm-watson-stt-embed-runtime.labels" . | nindent 8 }}
    spec:
      imagePullSecrets:
        {{- .Values.imagePullSecrets | toYaml | nindent 8 }}

      {{- include "ibm-embed-helpers.podSecurityContext" . | nindent 6 -}}

      initContainers:
      {{- range $index, $model := $modelsList }}
      - name: {{ $model.repository }}
        image: {{ include "ibm-embed-helpers.imageReference" (list $ $model) }}
        {{- include "ibm-embed-helpers.containerSecurityContext" . | nindent 8 -}}
        env:
        - name: ACCEPT_LICENSE
          value: {{ $.Values.license | quote }}
        resources:
          {{- $.Values.resources.runtime | toYaml | nindent 10 }}

        {{- if contains "generic-models" $model.repository }}
        # use args to not override license entrypoint
        args: ["cp", "catalog.json", "/opt/ibm/chuck.x86_64/var"]
        volumeMounts:
        - name: chuck-var
          mountPath: /opt/ibm/chuck.x86_64/var
        {{- else }}
        # use args to not override license entrypoint
        args:
        - sh
        - -c
        - cp model/* /models/pool2
        volumeMounts:
        - name: chuck-models
          mountPath: /models/pool2
        {{- end }}
      {{- end }}

      - name: prepare-models
        image: {{ include "ibm-embed-helpers.imageReference" (list . .Values.images.runtime) }}
        {{- include "ibm-embed-helpers.containerSecurityContext" . | nindent 8 -}}
        # use args to not override license entrypoint
        args: ["bash", "/prepareModels.sh"]
        env:
        - name: ACCEPT_LICENSE
          value: {{ $.Values.license | quote }}
        resources:
          {{- .Values.resources.runtime | toYaml | nindent 10 }}
        volumeMounts:
        - name: chuck-var
          mountPath: /opt/ibm/chuck.x86_64/var
        - name: chuck-logs
          mountPath: /opt/ibm/chuck.x86_64/logs
        - name: chuck-models
          mountPath: /models/pool2
        - name: config
          subPath: prepareModels.sh
          mountPath: "/prepareModels.sh"
        - name: config
          mountPath: /opt/ibm/chuck.x86_64/var/env_config.json
          subPath: env_config.json
        - name: tmp
          mountPath: /tmp

      containers:
      - name: runtime
        image: {{ include "ibm-embed-helpers.imageReference" (list . .Values.images.runtime) }}
        {{- include "ibm-embed-helpers.containerSecurityContext" . | nindent 8 -}}
        resources:
          {{- .Values.resources.runtime | toYaml | nindent 10 }}
        env:
        - name: ACCEPT_LICENSE
          value: {{ $.Values.license | quote }}
        - name: KUBERNETES_RESOURCE_CPUS
          valueFrom:
            resourceFieldRef:
              containerName: runtime
              resource: requests.cpu
        - name: KUBERNETES_RESOURCE_MEM
          valueFrom:
            resourceFieldRef:
              containerName: runtime
              resource: requests.memory
        ports:
        - containerPort: 1080
        startupProbe:
          tcpSocket:
            port: 1080
          periodSeconds: 30
          failureThreshold: 12
        readinessProbe:
          httpGet:
             port: 1080
             path: /v1/miniHealthCheck
          periodSeconds: 10
          timeoutSeconds: 1
        livenessProbe:
          tcpSocket:
            port: 1080
          periodSeconds: 30
        volumeMounts:
        - name: chuck-var
          mountPath: /opt/ibm/chuck.x86_64/var
        - name: chuck-logs
          mountPath: /opt/ibm/chuck.x86_64/logs
        - name: config
          subPath: env_config.json
          mountPath: /opt/ibm/chuck.x86_64/var/env_config.json
        - name: config
          subPath: sessionPools.yaml
          mountPath: /opt/ibm/chuck.x86_64/var/sessionPools.yaml
        - name: config
          subPath: sessionPools.py
          mountPath: /opt/ibm/chuck.x86_64/var/sessionPools.py
        - name: config
          subPath: resourceRequirements.py
          mountPath: /opt/ibm/chuck.x86_64/var/resourceRequirements.py
        # ephemeral volume for scratch space
        - name: tmp
          mountPath: /tmp
        lifecycle:
          preStop:
            exec:
              command:
              - /bin/sleep
              - "15"

      - name: haproxy
        image: {{ include "ibm-embed-helpers.imageReference" (list . .Values.images.haproxy) }}
        {{- include "ibm-embed-helpers.containerSecurityContext" . | nindent 8 -}}
        # use args to not override license entrypoint
        args:
          - sh
          - -c
          # HAProxy needs a single file with the key and cert
          #   write combined file to a read-write mount
          - cat /etc/ssl/private/server/tls.crt /etc/ssl/private/server/tls.key > /tmp/haproxy.tls;
            exec /runHaproxy.sh;
        resources:
          {{- .Values.resources.haproxy | toYaml | nindent 10 }}
        env:
        - name: ACCEPT_LICENSE
          value: {{ .Values.license | quote }}
        ports:
        - containerPort: 1443
        readinessProbe:
          httpGet:
            path: /v1
            port: 1443
            scheme: HTTPS
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 1
        livenessProbe:
          tcpSocket:
            port: 1443
          initialDelaySeconds: 15
          periodSeconds: 30
        volumeMounts:
        - mountPath: /etc/ssl/private/server
          name: server-tls
        - mountPath: /etc/haproxy/haproxy.cfg
          name: config
          subPath: haproxy.cfg
        - name: tmp
          mountPath: /tmp

      volumes:
        - name: chuck-var
          emptyDir: {}
        - name: chuck-models
          emptyDir: {}
        - name: chuck-cache
          emptyDir: {}
        - name: chuck-logs
          emptyDir: {}
        - name: config
          configMap:
            name: {{ include "ibm-watson-stt-embed-runtime.fullname" . }}
        - name: tmp
          emptyDir: {}
        - name: server-tls
          secret:
            secretName: {{ include "ibm-watson-stt-embed-runtime.fullname" . }}-tls-server

      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "kubernetes.io/arch"
                operator: In
                values:
                  - "amd64"
